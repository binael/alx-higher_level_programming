A test to for adding two inteter

Import Python module + collections
>>> import sys
>>> sys.path.insert(1, '../')
>>> lib = __import__("0-add_integer")
>>> add_integer = lib.add_integer

# Normal addition test
>>> add_integer(0)
98
>>> add_integer(-10)
88
>>> add_integer(3.0, 2.0)
5
>>> add_integer(1.5)
99
>>> add_integer(10, 8)
18
>>> add_integer(8.8, -1.2)
7
>>> add_integer(-3.2, -6.7)
-9

# Type Errors:
#None type
>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer

Complex numbers
>>> add_integer(1+2j)
Traceback (most recent call last):
...
TypeError: a must be an integer

# A list
>>> add_integer([])
Traceback (most recent call last):
...
TypeError: a must be an integer

# A string
>>> add_integer("23")
Traceback (most recent call last):
...
TypeError: a must be an integer

# Two input addition type errors
# int and None type
>>> add_integer(1, None)
Traceback (most recent call last):
...
TypeError: b must be an integer

# int and complex number
>>> add_integer(1, 1+2j)
Traceback (most recent call last):
...
TypeError: b must be an integer

#int and list
>>> add_integer(1, [])
Traceback (most recent call last):
...
TypeError: b must be an integer

#int and string
>>> add_integer(1, "tensei")
Traceback (most recent call last):
...
TypeError: b must be an integer

# Both inputs are neither float nor int
# Both string
>>> add_integer("3", "4")
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> add_integer(float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
